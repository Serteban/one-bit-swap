/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Datos {
  export type TokenStruct = {
    ticker: PromiseOrValue<string>;
    contrato: PromiseOrValue<string>;
    oraculo: PromiseOrValue<string>;
    decimales: PromiseOrValue<BigNumberish>;
    estado: PromiseOrValue<BigNumberish>;
    existe: PromiseOrValue<boolean>;
  };

  export type TokenStructOutput = [
    string,
    string,
    string,
    number,
    number,
    boolean
  ] & {
    ticker: string;
    contrato: string;
    oraculo: string;
    decimales: number;
    estado: number;
    existe: boolean;
  };
}

export interface GestorTokensInterface extends utils.Interface {
  functions: {
    "activarToken(string)": FunctionFragment;
    "archivoOrdenes()": FunctionFragment;
    "consultarCotizacion(string)": FunctionFragment;
    "emptyString(string)": FunctionFragment;
    "listarTokens(bool)": FunctionFragment;
    "modifcarOraculo(string,address)": FunctionFragment;
    "nuevoToken(address,address)": FunctionFragment;
    "plataforma()": FunctionFragment;
    "suspenderToken(string)": FunctionFragment;
    "tokensMap(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activarToken"
      | "archivoOrdenes"
      | "consultarCotizacion"
      | "emptyString"
      | "listarTokens"
      | "modifcarOraculo"
      | "nuevoToken"
      | "plataforma"
      | "suspenderToken"
      | "tokensMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activarToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "archivoOrdenes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consultarCotizacion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emptyString",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listarTokens",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifcarOraculo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nuevoToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "plataforma",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "suspenderToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensMap",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activarToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archivoOrdenes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consultarCotizacion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listarTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifcarOraculo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nuevoToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plataforma", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspenderToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokensMap", data: BytesLike): Result;

  events: {};
}

export interface GestorTokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GestorTokensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activarToken(
      _ticker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    archivoOrdenes(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        cantidadTotal: BigNumber;
        cantidadActivas: BigNumber;
        ultimaOrdenActiva: string;
      }
    >;

    consultarCotizacion(
      _ticker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { precio: BigNumber }>;

    emptyString(
      _string: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listarTokens(
      _incluirSuspendidos: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[Datos.TokenStructOutput[]]>;

    modifcarOraculo(
      _ticker: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nuevoToken(
      _contrato: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    plataforma(
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        estado: number;
        propietario: string;
        montoMinimoUSD: BigNumber;
      }
    >;

    suspenderToken(
      _ticker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, boolean] & {
        ticker: string;
        contrato: string;
        oraculo: string;
        decimales: number;
        estado: number;
        existe: boolean;
      }
    >;
  };

  activarToken(
    _ticker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  archivoOrdenes(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      cantidadTotal: BigNumber;
      cantidadActivas: BigNumber;
      ultimaOrdenActiva: string;
    }
  >;

  consultarCotizacion(
    _ticker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emptyString(
    _string: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listarTokens(
    _incluirSuspendidos: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<Datos.TokenStructOutput[]>;

  modifcarOraculo(
    _ticker: PromiseOrValue<string>,
    _oraculo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nuevoToken(
    _contrato: PromiseOrValue<string>,
    _oraculo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  plataforma(
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      estado: number;
      propietario: string;
      montoMinimoUSD: BigNumber;
    }
  >;

  suspenderToken(
    _ticker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number, boolean] & {
      ticker: string;
      contrato: string;
      oraculo: string;
      decimales: number;
      estado: number;
      existe: boolean;
    }
  >;

  callStatic: {
    activarToken(
      _ticker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    archivoOrdenes(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        cantidadTotal: BigNumber;
        cantidadActivas: BigNumber;
        ultimaOrdenActiva: string;
      }
    >;

    consultarCotizacion(
      _ticker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emptyString(
      _string: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listarTokens(
      _incluirSuspendidos: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<Datos.TokenStructOutput[]>;

    modifcarOraculo(
      _ticker: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nuevoToken(
      _contrato: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    plataforma(
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        estado: number;
        propietario: string;
        montoMinimoUSD: BigNumber;
      }
    >;

    suspenderToken(
      _ticker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, boolean] & {
        ticker: string;
        contrato: string;
        oraculo: string;
        decimales: number;
        estado: number;
        existe: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    activarToken(
      _ticker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    archivoOrdenes(overrides?: CallOverrides): Promise<BigNumber>;

    consultarCotizacion(
      _ticker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emptyString(
      _string: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listarTokens(
      _incluirSuspendidos: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifcarOraculo(
      _ticker: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nuevoToken(
      _contrato: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    plataforma(overrides?: CallOverrides): Promise<BigNumber>;

    suspenderToken(
      _ticker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activarToken(
      _ticker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    archivoOrdenes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consultarCotizacion(
      _ticker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emptyString(
      _string: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listarTokens(
      _incluirSuspendidos: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifcarOraculo(
      _ticker: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nuevoToken(
      _contrato: PromiseOrValue<string>,
      _oraculo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    plataforma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suspenderToken(
      _ticker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
